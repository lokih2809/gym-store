// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql" // Hoặc mysql, sqlite, sqlserver
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Product {
  id           Int            @id @default(autoincrement())
  name         String
  description  String
  price        Float
  sku          String
  category     String
  fit          String
  colors       ProductColor[]
  productSizes ProductSize[]
  cartItems    CartItem[]
  orderItems   OrderItem[]
}

model ProductColor {
  id        Int      @id @default(autoincrement())
  productId Int
  colorName String
  colorHex  String
  images    String[] // Mỗi màu sẽ có một mảng hình ảnh riêng
  product   Product  @relation(fields: [productId], references: [id])
}

model ProductSize {
  id        Int     @id @default(autoincrement())
  productId Int
  size      String
  product   Product @relation(fields: [productId], references: [id])
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  carts     Cart[]
  orders    Order[]
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int
  user      User       @relation(fields: [userId], references: [id])
  cartItems CartItem[]
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Order {
  id                Int             @id @default(autoincrement())
  userId            Int
  shippingAddressId Int
  totalPrice        Float
  createdAt         DateTime        @default(now())
  user              User            @relation(fields: [userId], references: [id])
  shippingAddress   ShippingAddress @relation(fields: [shippingAddressId], references: [id])
  orderItems        OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model ShippingAddress {
  id      Int     @id @default(autoincrement())
  address String
  orders  Order[]
}
